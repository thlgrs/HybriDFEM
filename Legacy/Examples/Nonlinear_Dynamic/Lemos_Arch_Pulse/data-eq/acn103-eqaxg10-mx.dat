; -----------------------------------------------------------
;
; --- dynamic analysis --- half-sine pulse loading ---
;
; -----------------------------------------------------------

; --- single run ---
; model new
model restore 'acn103g.sav'
[nnomega=0]
[appdamp = 0.05]
[iappdamp = int(100*appdamp)]
[freqomega=iappdamp]
; fraction of g
[eqxg=0.10]
[eqyg=0.0]
[ieqxg=int(100*eqxg)]
[ieqyg=int(100*eqyg)]
; kal. long (*1/2) peak 0.135g
; [eqx=eqxg/0.135]
; [eqy=eqyg/0.135]
; [ieqx=100*int(eqx)]
; [ieqy=100*int(eqy)]
; registo EC8, eq23s1.txt, peak 0.178g
[eqx=eqxg/0.178]
[eqy=eqyg/0.178]
[ieqx=100*int(eqx)]
[ieqy=100*int(eqy)]

; dynamic load multiplier
; [eqx=0.10]
; [eqx=0.20]

; --- called from py ---
; [nnomega]
; [appdamp=float(freqomega)*0.01]
; [ieqx]

; model name
[xname='acn103']
; [xnamed=xname+'-pp'+string(ieqx)+'-mx'+string(freqomega)]
[xnamed=xname+'-eqaxg'+string(ieqxg)+'-mx'+string(iappdamp)]

; create log file
; prog log-f [xname+'.log']
prog log-f [xnamed+'.log']
prog log on

; zero velocities and displacements
block ini vel-x 0.0
block ini vel-y 0.0
block ini vel-z 0.0
; to do rotational velocities
call 'zerovelrig.dat'
block gridpoint initialize displacement 0 0 0
; block gp ini dis-x 0.0
; block gp ini dis-y 0.0
; block gp ini dis-z 0.0

[io.out(' nnomega   = '+string(nnomega))]
[io.out(' freqomega = '+string(freqomega))]
[io.out(' appdamp   = '+string(appdamp))]
[io.out(' ieqx      = '+string(ieqx))]
[io.out(' eqx       = '+string(eqx))]
[io.out(' ieqxg      = '+string(ieqxg))]
[io.out(' eqxg       = '+string(eqxg))]

; --- select dynamic analysis ---
model dynamic active on
; model mechanical time-total 7.0
model mechanical time-total 0.0

; mass damping: 0.3% at 1 Hz
; block mechanical damping rayleigh 0.006 1.0 mass
; block mechanical damping rayleigh 0.02 11.0 mass
; block mechanical damping rayleigh 0.10 11.0 stiff
; block mechanical damping rayleigh 0.05 11.0
; --- Maxwell Damping Properties for 5% damping, 0.5-25 hz------------
; block mech damping maxwell (0.0385 0.5) (0.0335 3.5) (0.052 25.0)
; Maxwell damping, 5%, 1 - 50 Hz
; block mech damping maxwell (0.0385 1.0) (0.0335 7.1) (0.052 50.0)
[dmx1 = 0.0385 * (appdamp/0.05)]
[dmx2 = 0.0335 * (appdamp/0.05)]
[dmx3 = 0.052  * (appdamp/0.05)]
block mech damping maxwell ([dmx1] 1.0) ([dmx2] 7.1) ([dmx3] 50.0)
; block mechanical damping rayleigh [2*appdamp] 11.0 stiff
; block mechanical damping rayleigh [2*appdamp] 11.0 mass

; --- horizontal dynamic pulse ---
; simulated by changing horizontal gravity at every step

; --- define pulse function ---
; fish def pulse_sin0
;    ; pulse : half sine, freq 2 hz, duration 0.25 s
;    pdur = 0.25
;    pfreq = 2.0
;    wwfreq = 2.0*math.pi*pfreq
;    peakaccx = eqx
;    peakaccy = eqy
; end
; [pulse_sin0]
; [io.out(' pulse duration     = '+string(pdur))]
; [io.out(' pulse freq         = '+string(pfreq))]
; [io.out(' pulse duration     = '+string(pdur))]
; [io.out(' pulse peak x-acc (g) = '+string(peakaccx))]
; [io.out(' pulse peak y-acc (g) = '+string(peakaccy))]

; --- calculate pulse at evry step ---
; fish def pulse_sin
;    ; call function at every step
;    while_stepping
;    ; pulse : half sine
;    gravx = 0.0
;    gravy = 0.0
;    if mech.time <= pdur
;      gravx = 10.0 * peakaccx * math.sin(wwfreq*mech.time)
;      gravy = 10.0 * peakaccy * math.sin(wwfreq*mech.time)
;    else
;      gravx = 0.0
;      gravy = 0.0
;    endif
;    command
;      model gravity [gravx] [gravy] -10
;    endcommand
; end

; --- dynamic input --- read velocity record ---
; table '1' import 'vel01.txt'
; table '1' import 'kal-05-long-vel.txt'
; table '1' import 'kal-05-lat-vel.txt'
table 1 import 'eq23s1.txt'

; apply input to rigid block
; block apply velocity-x 1.00 history table 1 range position-z -1 0
; block apply velocity-x 1.00 table 1 range group 'bbase'
; block apply velocity-y 1.00 table 1 range group 'bbase'
; block apply velocity-y 2.00 table 1 range group 'bbase'
; block apply velocity-y [eqy] table 1 range group 'bbase'
block apply velocity-x [eqx] table 1 range group 'bbase'

; delete old histories
history delete

; --- select new histories ---
; history 1 is time
model hist mech t-t

; history of pulse function
; fish hist gravx
; fish hist gravy

; model history mechanical unbalanced-maximum
; model history dyn time-total
; block history displacement-x position -5 0 -0.5
; block history displacement-y position -5 0 -0.5
; block history displacement-z position -5 0 -0.5
block history displacement-x position 0 0 4.2
block history displacement-y position 0 0 4.2
block history displacement-z position 0 0 4.2

fish def diff_disp_0
  igpbase = block.gp.near(-6.0,-1.0,-1.0)
  igptop = block.gp.near(0.0,0.0,4.2)
  local ss2=' base gp: igpbase '+string(igpbase)+' '+string(block.gp.pos.x(igpbase))
  ss2=ss2+' '+string(block.gp.pos.y(igpbase))+' '+string(block.gp.pos.z(igpbase))
  io.out(ss2)
  local ss1=' top gp: igptop '+string(igptop)+' '+string(block.gp.pos.x(igptop))
  ss1=ss1+' '+string(block.gp.pos.y(igptop))+' '+string(block.gp.pos.z(igptop))
  io.out(ss1)
  hh = 1.0
  diff_xdisp = 0.0
  diff_ydisp = 0.0
  diff_zdisp = 0.0
  diff_disp  = 0.0
  diff_xdisp_max = 0.0
  diff_ydisp_max = 0.0
  diff_zdisp_max = 0.0
  diff_disp_max  = 0.0
end
[diff_disp_0]

fish def diff_disp_h
  whilestepping
  diff_xdisp = block.gp.disp.x(igptop) - block.gp.disp.x(igpbase)
  diff_ydisp = block.gp.disp.y(igptop) - block.gp.disp.y(igpbase)
  diff_zdisp = block.gp.disp.z(igptop) - block.gp.disp.z(igpbase)
  diff_disp = math.sqrt(diff_xdisp * diff_xdisp + diff_ydisp * diff_ydisp + diff_zdisp * diff_zdisp)
  diff_xdisp_max = math.max(math.abs(diff_xdisp),diff_xdisp_max)
  diff_ydisp_max = math.max(math.abs(diff_ydisp),diff_ydisp_max)
  diff_zdisp_max = math.max(math.abs(diff_zdisp),diff_zdisp_max)
  diff_disp_max = math.max(math.abs(diff_disp),diff_disp_max)
end

; fish histories
fish hist diff_xdisp
fish hist diff_ydisp
fish hist diff_zdisp
fish hist diff_disp

; time step
model step 1
; define history sampling time interval
[dthist=0.001]
call 'setnnhis.dat'
history interval [nnhis]

; model mechanical time-total 0.0
; model dyn time-total 0.0

; --- run ---
; define duration of run
; [xsolvetime=3.0]
; [xsolvetime=2.0]
; [io.out(' xsolvetime = '+string(xsolvetime))]
; [io.out(' appdamp   = '+string(appdamp))]
; [io.out(' eqx       = '+string(eqx))]

; turn off messages to screen (e.g. changing gravity)
; prog echo off
; prog notice off
; prog log off

; model solve dyn t-t [xsolvetime]
; fish def runcheckfail
;   ddfail = 0.2
;   dxsolvetime = 0.1*xsolvetime
;   loop jjj (1,10)
;     xsolvett = float(jjj)*dxsolvetime
;     command
;       model solve dyn t-t [xsolvett]
;     endcommand
;     if diff_xdisp_max > ddfail
;       io.out(' fail: jjj '+string(jjj)+' diff_xdisp_max '+string(diff_xdisp_max))
;       exit
;     endif
;   endloop
; end
; [runcheckfail]

; turn on again messages to screen
; prog echo on
; prog notice on
; prog log on

; kalamata t=7
; model mechanical time-total 7.0
; model dyn time-total 7.0
; start at t=0
model mechanical time-total 0.0
model dyn time-total 0.0

model solve dyn t-t 1.0
model solve dyn t-t 2.0
model solve dyn t-t 3.0
model solve dyn t-t 4.0
model solve dyn t-t 5.0

; model save [xnamed+'t5.sav']

model solve dyn t-t 6.0
model solve dyn t-t 7.0
model solve dyn t-t 8.0
model solve dyn t-t 9.0
model solve dyn t-t 10.0

; model save [xnamed+'t10.sav']

model solve dyn t-t 11.0
model solve dyn t-t 12.0
model solve dyn t-t 13.0
model solve dyn t-t 14.0
model solve dyn t-t 15.0

; model save [xnamed+'t15.sav']

model solve dyn t-t 16.0
; model solve dyn t-t 17.0
; model solve dyn t-t 18.0
; model solve dyn t-t 19.0
; model solve dyn t-t 20.0

model save [xnamed+'.sav']

[tab107=xnamed+'-h5']
history export 5 vs 1 table [tab107]
table [tab107] export [tab107+'.txt']

block list max

[io.out(' diff_xdisp = '+string(diff_xdisp))]
[io.out(' diff_ydisp = '+string(diff_ydisp))]
[io.out(' diff_zdisp = '+string(diff_zdisp))]
[io.out(' diff_disp = '+string(diff_disp))]
[io.out(' diff_xdisp_max = '+string(diff_xdisp_max))]
[io.out(' diff_ydisp_max = '+string(diff_ydisp_max))]
[io.out(' diff_zdisp_max = '+string(diff_zdisp_max))]
[io.out(' diff_disp_max = '+string(diff_disp_max))]

ret

